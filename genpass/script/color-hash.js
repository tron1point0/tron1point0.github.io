define([
    "jquery",
    "utils/String",
], function($) {
    /**
     * Default CSS colors to switch between.
     */
    const DEFAULT_COLOR_MAP = [
            "black",
            "maroon",
            "green",
            "olive",
            "navy",
            "purple",
            "teal",
            "silver",
            "gray",
            "red",
            "lime",
            "yellow",
            "blue",
            "fuchsia",
            "aqua",
            "white",
        ];

    /**
     * Default CSS class of the node generated by <tt>generate</tt>.
     */
    const DEFAULT_CLS = "color-hash";

    /**
     * Creates a string-to-colors hasher.
     *
     * <tt>options</tt> is an object that can contain the following keys:
     *
     *  * <tt>colorMap</tt>
     *    Array of color names or CSS color descriptors to select colors from.
     *
     * @exports
     * @constructor
     * @this {ColorHash}
     * @param {Object} [options] Overrides of default values.
     * @returns {ColorHash}
     */
    var ColorHash = function(options) {
        this.colorMap = DEFAULT_COLOR_MAP;
        this.cls = DEFAULT_CLS;

        if (options) {
            $.extend(this, options);
        }

        return this;
    };

    /**
     * Returns an array of 3 indexes into <tt>this.colorMap</tt> that
     * correspond to a hash of the input <tt>string</tt>.
     *
     * @this {ColorHash}
     * @param {String} string The string to hash into colors.
     * @return {Uint8Array} 3 indexes.
     */
    ColorHash.prototype.colors = function(string) {
        var _ret = new Uint8Array(3),
            max = (string.length - 1) * _ret.length;

        for (var i = 0; i < max; i++) {
            _ret[i % _ret.length] ^= string.charCodeAt(i % string.length);
        }

        return _ret;
    };

    /**
     * Returns a CSS <tt>linear-gradient</tt> mapping the indexes of
     * <tt>array</tt> to their corresponding color in <tt>this.colorMap</tt>.
     *
     * <tt>array</tt> <em>may</em> contain integers greater than
     * <tt>this.colorMap.length - 1</tt>.
     *
     * @this {ColorHash}
     * @param {Uint8Array} array Array of indexes into <tt>this.colorMap</tt>.
     * @return {String} The CSS definition of the gradient.
     */
    ColorHash.prototype.linearGradient = function(array) {
        var args = ["0deg"],
            step = 100 / array.length;

        for (var i = 0; i < array.length; i++) {
            var color = this.colorMap[array[i] % this.colorMap.length];
            args.push(color + " " + Math.round(step * i) + "%");
            args.push(color + " " + Math.round(step * (i + 1)) + "%");
        }

        return "linear-gradient(" + args.join(", ") + ")";
    };

    return ColorHash;
});
